# -*- coding: utf-8 -*
import asyncio
from multiprocessing import Process
import logging
import random

from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher.filters import Text

from markups import bot_menu, top_up_menu, fill_balance_menu, referal_menu

from settings import set
from settings.config_bot import TOKEN_BOT_API
from settings.config_bot import TOKEN_QIWI_API
from settings.config_bot import BOT_NICKNAME

from pyqiwip2p import QiwiP2P

import auditorium_parser
from database_adapter import DatabaseAdapter

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(TOKEN_BOT_API)

# –û–±—ä–µ–∫—Ç –ª–ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
storage = MemoryStorage()

# –û–±—ä–µ–∫—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher(bot=bot, storage=storage)

# –û–±—ä–µ–∫—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - phpmyadmin
database_adapter = DatabaseAdapter()

# –û–±—ä–µ–∫—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ –ö–∏–≤–∏
qiwi_pay = QiwiP2P(TOKEN_QIWI_API)

tasks_queue = asyncio.queues.Queue()


class ParserStatesGroup(StatesGroup):
    buy = State()
    doing = State()


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=bot_menu)
    await message.delete()

    if not database_adapter.user_exists(message.from_user.id):
        message_command = message.text
        referrer_id = str(message_command)[7:]

        if referrer_id != '':
            if referrer_id != str(message.from_user.id):
                database_adapter.add_user(message.from_user.id, referrer_id)
                await message.answer(
                    '–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–∏–º –∏ –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞–±–æ—Ç–µ)')
            else:
                await message.answer('–ü–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–µ–ª—å–∑—è')
                database_adapter.add_user(message.from_user.id)
        else:
            database_adapter.add_user(message.from_user.id)


async def start_parse(link, id):
    parse = auditorium_parser.Parser()
    await parse.start(link, id)


def is_number(_str):
    try:
        int(_str)
        return True
    except ValueError:
        return False


def generate_comment(user_id):
    return str(user_id) + '_' + str(random.randint(1000, 9999))


def validate_link(link):
    print(link)
    if 't.me' in link or '@' in link:
        return True
    return False


def define_link(link):
    if '@' in link:
        return link[1:]
    else:
        return link[13:]


async def handle_user_order(msg: types.Message):
    try:
        await msg.answer("–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...")
        await ParserStatesGroup.next()
        await start_parse(define_link(str(msg.text)), str(msg.from_user.id))
        await bot.send_document(msg.from_user.id, open("channel_users_" + str(msg.from_user.id) + ".json", 'rb'))
        await bot.send_document(msg.from_user.id, open("channel_full_users_" + str(msg.from_user.id) + ".json", 'rb'))
        await ParserStatesGroup.next()
    except Exception as e:
        await msg.answer("–ß–∞—Ç–∞ —Å –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        await ParserStatesGroup.next()
        print(e)


@dp.message_handler(lambda message: message.text, state=ParserStatesGroup.buy)
async def start_parse_handle(msg: types.Message):
    if validate_link(str(msg.text)):
        await tasks_queue.put(handle_user_order(msg))
    else:
        await msg.answer("–ö–∞–∂–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–∞–º–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è")


@dp.message_handler(lambda message: message.text, state=ParserStatesGroup.doing)
async def doing_parse_handle(msg: types.Message):
    await msg.answer('–ñ–¥–∏—Ç–µ, –ø–æ–∫–∞ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å—è—Ç—Å—è')


@dp.message_handler(Text(equals='üíº–°–ø–∞—Ä—Å–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é (10 —Ä—É–±.)', ignore_case=True))
async def parse_handle(msg: types.Message):
    if database_adapter.get_balance(msg.from_user.id) >= set.PARSING_COST:
        database_adapter.set_balance(msg.from_user.id,
                                     database_adapter.get_balance(msg.from_user.id) - set.PARSING_COST)
        await ParserStatesGroup.buy.set()
        await msg.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –≤–∏–¥–∞: "@group" –∏–ª–∏ "https://t.me..."')
    else:
        await msg.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤...', reply_markup=top_up_menu)


@dp.message_handler(Text(equals='üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', ignore_case=True), state=None)
async def fill_balance_handle(msg: types.Message):
    await msg.answer('balance', reply_markup=top_up_menu)


@dp.message_handler(Text(equals='üí∂–ú–æ–π –±–∞–ª–∞–Ω—Å', ignore_case=True), state=None)
async def check_balance_handle(msg: types.Message):
    await msg.answer('üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ' + str(database_adapter.get_balance(user_id=msg.from_user.id)) + ' —Ä')


@dp.message_handler(Text(equals='üßë‚Äçüíª–ü–æ–¥–¥–µ—Ä–∂–∫–∞', ignore_case=True), state=None)
async def check_balance_handle(msg: types.Message):
    await msg.answer('–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @username')


@dp.message_handler(Text(equals='üë®‚Äçüë©‚Äçüëß‚Äçüë¶–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', ignore_case=True), state=None)
async def referal_handle(msg: types.Message):
    await msg.answer(
        '–° –∫–∞–∂–¥–æ–π —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 35% –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å. - –° —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç.',
        reply_markup=referal_menu)


@dp.message_handler(Text(equals='‚úçÔ∏è–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É', ignore_case=True), state=None)
async def get_referal_link_handle(msg: types.Message):
    await msg.answer(f'https://t.me/{BOT_NICKNAME}?start={str(msg.from_user.id)}')


@dp.message_handler(Text(equals='üí≥–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å', ignore_case=True), state=None)
async def get_referal_balance_handle(msg: types.Message):
    await msg.answer(database_adapter.get_ref_balance(str(msg.from_user.id)))


@dp.message_handler(Text(equals='üí∂–í—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å', ignore_case=True), state=None)
async def get_referal_money_handle(msg: types.Message):
    ref_balance = database_adapter.get_ref_balance(str(msg.from_user.id))
    balance = database_adapter.get_balance(str(msg.from_user.id))
    database_adapter.set_balance(str(msg.from_user.id), balance + ref_balance)
    database_adapter.set_ref_balance(str(msg.from_user.id), 0)


@dp.message_handler(Text(equals='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', ignore_case=True), state=None)
async def to_menu_handle(msg: types.Message):
    await msg.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=bot_menu)


@dp.message_handler(state=None)
async def message_handler(msg: types.Message):
    if is_number(msg.text):
        msg_money = int(msg.text)
        if msg_money >= set.MINIMAL_TOP_UP:
            comment = generate_comment(msg.from_user.id)
            bill = qiwi_pay.bill(amount=msg_money, lifetime=set.BILL_LIFETIME, comment=comment)

            database_adapter.add_check(msg.from_user.id, msg_money, bill.bill_id)

            await bot.send_message(msg.from_user.id,
                                   f'–í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {msg_money} —Ä—É–±–ª–µ–π –Ω–∞ –Ω–∞—à —Å—á–µ—Ç QIWI\n–°—Å—ã–ª–∫–∞:{bill.pay_url}\n '
                                   f'–£–∫–∞–∑–∞–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–ª–∞—Ç–µ: {comment}',
                                   reply_markup=fill_balance_menu(url=bill.pay_url, bill=bill.bill_id))
        else:
            await msg.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ' + str(set.MINIMAL_TOP_UP) + ' —Ä—É–±')

    else:
        await msg.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é –∏–ª–∏ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ(')


@dp.callback_query_handler(text="top_up")
async def top_up(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")


@dp.callback_query_handler(text_contains="check")
async def check(callback: types.CallbackQuery):
    bill = str(callback.data[5:])
    print(bill)
    info = database_adapter.get_check(bill)
    print(info)
    if info:
        print(str(qiwi_pay.check(bill_id=bill).status))
        if str(qiwi_pay.check(bill_id=bill).status) == 'PAID':
            user_balance = database_adapter.get_balance(callback.from_user.id)
            referrer_id = database_adapter.get_referrer_id(callback.from_user.id)
            referrer_ref_balance = database_adapter.get_ref_balance(referrer_id)
            money = info[2]
            database_adapter.set_balance(callback.from_user.id, user_balance + money)
            database_adapter.set_ref_balance(referrer_id, referrer_ref_balance + money * set.REFERAL_PERCENT)
            await bot.send_message(callback.from_user.id, '–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!)')
            database_adapter.delete_check(bill)
        else:
            await bot.send_message(callback.from_user.id, '–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç!',
                                   reply_markup=fill_balance_menu(False, bill=bill))
            await bot.delete_message(callback.from_user.id, callback.message.message_id)
    else:
        await bot.send_message(callback.from_user.id, '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!')


async def worker():
    while True:
        if tasks_queue.empty():
            continue
        task = await tasks_queue.get()
        await task
        tasks_queue.task_done()


def run_in_parallel(*fns):
    proc = []
    for fn in fns:
        p = Process(target=fn)
        p.start()
        proc.append(p)
    for p in proc:
        p.join()


def bot_start():
    executor.start_polling(dp, skip_updates=True)


def worker_start():
    asyncio.run(worker())


if __name__ == "__main__":
    run_in_parallel(bot_start, worker_start)

